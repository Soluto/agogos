// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mergeDocuments Merge directives on types - duplicate definition 1`] = `
"type SomeType @entity {
  fieldA: String
  fieldB: String
}
"
`;

exports[`mergeDocuments Merge directives on types - single definition 1`] = `
"type SomeType @entity {
  fieldA: String
  fieldB: String
}
"
`;

exports[`mergeDocuments Merge interfaces on types - duplicate definition 1`] = `
"interface SomeInterface {
  someInterfaceField: String
}

type SomeType implements SomeInterface {
  fieldA: String
  fieldB: String
}
"
`;

exports[`mergeDocuments Merge interfaces on types - single definition 1`] = `
"interface SomeInterface {
  someInterfaceField: String
}

type SomeType implements SomeInterface {
  fieldA: String
  fieldB: String
}
"
`;

exports[`mergeDocuments Same type, one of the types is with extra field 1`] = `
"type SomeType {
  fieldA: String
  anotherField: String
}
"
`;

exports[`mergeDocuments Same types with same fields 1`] = `
"type SomeType {
  fieldA: String
}
"
`;

exports[`mergeDocuments Same types with same fields one has no directive the other has some directive 1`] = `
"type SomeType {
  fieldA: String @someDirective(someArg: \\"some-value\\")
}
"
`;

exports[`mergeDocuments Same types with same fields that have same directive type with different args 1`] = `
"type SomeType {
  fieldA: String @someDirective(someArg: \\"some-value-1\\") @someDirective(someArg: \\"some-value-2\\")
}
"
`;

exports[`mergeDocuments Same types with same fields that have the exact same directives 1`] = `
"type SomeType {
  fieldA: String @someDirective(someArg: \\"some-value\\")
}
"
`;

exports[`mergeDocuments Same types with same fields that have two different directives 1`] = `
"type SomeType {
  fieldA: String @someDirective1(someArg: \\"some-value\\") @someDirective2(someArg: \\"some-value\\")
}
"
`;

exports[`mergeDocuments Same types with two different fields 1`] = `
"type SomeType {
  fieldA: String
  fieldB: String
}
"
`;

exports[`mergeDocuments Same unions one has partial of the types 1`] = `
"union SomeUnion = String | Int
"
`;

exports[`mergeDocuments Same unions one of the unioned type is the same and other types differ 1`] = `
"union SomeUnion = String | Int | Boolean
"
`;

exports[`mergeDocuments Same unions with different unioned types 1`] = `
"union SomeUnion = String | Int
"
`;

exports[`mergeDocuments Same unions with same unioned types 1`] = `
"union SomeUnion = String | Int
"
`;
