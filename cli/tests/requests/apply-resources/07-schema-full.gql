type Order {
  id: ID!
  product: Product!
  buyer: Person!
  purchased: DateTime!
  quantity: Int!
}

type Product {
  id: ID!
  name: String!
  description: String
  price: Int!
  category: Category!
}

type ProductMutation {
  id: ID!
  edit(input: ProductInput!): boolean!
}

type Review {
  id: ID!
  product: Product!
  title: String!
  text: String
  author: Person!
}

type ReviewMutation {
  id: ID!
  edit(input: ReviewInput!): boolean!
}

type Query {
  orders: [Order!]
  order(id: ID!): Order
  products: [Product!]
  product(id: ID!): Product
  reviews: [Review!]
  review(id: ID!): Review
}

type Mutation {
  placeOrder(input: OrderInput!): Order
  getProduct(id: ID!): ProductMutation
  addProduct(input: ProductInput!): Product!
  editProduct(id: ID!, input: ProductInput!): Product!
  removeProduct(id: ID!): boolean
  getReview(id: ID!): ReviewMutation
  addReview(input: ReviewInput!): Review!
  editReview(id: ID!, input: ReviewInput!): Review!
  removeReview(id: ID!): boolean!
}

extend type Person {
  orders: [Order!]
}

extend type Person @key(fields: "id") {
  id: ID! @external
  reviews: [Review!]
}

extend type Product {
  reviews: [Review!]
}

extend type ProductMutation {
  addReview(input: ProductReviewInput!): Review!
}

extend type PersonMutation @key(fields: "id") {
  id: ID! @external
  addReview(input: PersonReviewInput!): Review!
}

input OrderInput {
  product: ID!
  buyer: ID!
  purchased: DateTime!
  quantity: Int!
}

input ProductInput {
  name: String!
  description: String
  price: Int!
  category: Category!
}

input ReviewInput {
  product: ID!
  title: String!
  text: String
  author: ID!
}

input ProductReviewInput {
  title: String!
  text: String
  author: ID!
}

input PersonReviewInput {
  title: String!
  text: String
  product: ID!
}

enum Category {
  Clothing
  HomeDesign
  Toys
}
