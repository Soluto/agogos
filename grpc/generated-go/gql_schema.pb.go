// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gql_schema.proto

package gqlschema

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GqlSchemaSubscribeParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GqlSchemaSubscribeParams) Reset()         { *m = GqlSchemaSubscribeParams{} }
func (m *GqlSchemaSubscribeParams) String() string { return proto.CompactTextString(m) }
func (*GqlSchemaSubscribeParams) ProtoMessage()    {}
func (*GqlSchemaSubscribeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_30736b66ae12765f, []int{0}
}

func (m *GqlSchemaSubscribeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GqlSchemaSubscribeParams.Unmarshal(m, b)
}
func (m *GqlSchemaSubscribeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GqlSchemaSubscribeParams.Marshal(b, m, deterministic)
}
func (m *GqlSchemaSubscribeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GqlSchemaSubscribeParams.Merge(m, src)
}
func (m *GqlSchemaSubscribeParams) XXX_Size() int {
	return xxx_messageInfo_GqlSchemaSubscribeParams.Size(m)
}
func (m *GqlSchemaSubscribeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GqlSchemaSubscribeParams.DiscardUnknown(m)
}

var xxx_messageInfo_GqlSchemaSubscribeParams proto.InternalMessageInfo

type GqlSchemaMessage struct {
	Schema               string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GqlSchemaMessage) Reset()         { *m = GqlSchemaMessage{} }
func (m *GqlSchemaMessage) String() string { return proto.CompactTextString(m) }
func (*GqlSchemaMessage) ProtoMessage()    {}
func (*GqlSchemaMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_30736b66ae12765f, []int{1}
}

func (m *GqlSchemaMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GqlSchemaMessage.Unmarshal(m, b)
}
func (m *GqlSchemaMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GqlSchemaMessage.Marshal(b, m, deterministic)
}
func (m *GqlSchemaMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GqlSchemaMessage.Merge(m, src)
}
func (m *GqlSchemaMessage) XXX_Size() int {
	return xxx_messageInfo_GqlSchemaMessage.Size(m)
}
func (m *GqlSchemaMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GqlSchemaMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GqlSchemaMessage proto.InternalMessageInfo

func (m *GqlSchemaMessage) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func init() {
	proto.RegisterType((*GqlSchemaSubscribeParams)(nil), "gqlschema.GqlSchemaSubscribeParams")
	proto.RegisterType((*GqlSchemaMessage)(nil), "gqlschema.GqlSchemaMessage")
}

func init() { proto.RegisterFile("gql_schema.proto", fileDescriptor_30736b66ae12765f) }

var fileDescriptor_30736b66ae12765f = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2f, 0xcc, 0x89,
	0x2f, 0x4e, 0xce, 0x48, 0xcd, 0x4d, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0x2f,
	0xcc, 0x81, 0x08, 0x28, 0x49, 0x71, 0x49, 0xb8, 0x17, 0xe6, 0x04, 0x83, 0x39, 0xc1, 0xa5, 0x49,
	0xc5, 0xc9, 0x45, 0x99, 0x49, 0xa9, 0x01, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x4a, 0x5a, 0x5c, 0x02,
	0x70, 0x39, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x31, 0x2e, 0x36, 0x88, 0x4e, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0xcf, 0x28, 0x8e, 0x8b, 0x13, 0xae, 0x56, 0x28, 0x90,
	0x8b, 0x13, 0x6e, 0x96, 0x90, 0xb2, 0x1e, 0xdc, 0x36, 0x3d, 0x5c, 0x56, 0x49, 0x49, 0x63, 0x53,
	0x04, 0xb5, 0x53, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x72, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0xa9, 0x59, 0x99, 0xcd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GqlSchemaClient is the client API for GqlSchema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GqlSchemaClient interface {
	Subscribe(ctx context.Context, in *GqlSchemaSubscribeParams, opts ...grpc.CallOption) (GqlSchema_SubscribeClient, error)
}

type gqlSchemaClient struct {
	cc *grpc.ClientConn
}

func NewGqlSchemaClient(cc *grpc.ClientConn) GqlSchemaClient {
	return &gqlSchemaClient{cc}
}

func (c *gqlSchemaClient) Subscribe(ctx context.Context, in *GqlSchemaSubscribeParams, opts ...grpc.CallOption) (GqlSchema_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GqlSchema_serviceDesc.Streams[0], "/gqlschema.GqlSchema/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &gqlSchemaSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GqlSchema_SubscribeClient interface {
	Recv() (*GqlSchemaMessage, error)
	grpc.ClientStream
}

type gqlSchemaSubscribeClient struct {
	grpc.ClientStream
}

func (x *gqlSchemaSubscribeClient) Recv() (*GqlSchemaMessage, error) {
	m := new(GqlSchemaMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GqlSchemaServer is the server API for GqlSchema service.
type GqlSchemaServer interface {
	Subscribe(*GqlSchemaSubscribeParams, GqlSchema_SubscribeServer) error
}

func RegisterGqlSchemaServer(s *grpc.Server, srv GqlSchemaServer) {
	s.RegisterService(&_GqlSchema_serviceDesc, srv)
}

func _GqlSchema_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GqlSchemaSubscribeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GqlSchemaServer).Subscribe(m, &gqlSchemaSubscribeServer{stream})
}

type GqlSchema_SubscribeServer interface {
	Send(*GqlSchemaMessage) error
	grpc.ServerStream
}

type gqlSchemaSubscribeServer struct {
	grpc.ServerStream
}

func (x *gqlSchemaSubscribeServer) Send(m *GqlSchemaMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _GqlSchema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gqlschema.GqlSchema",
	HandlerType: (*GqlSchemaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GqlSchema_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gql_schema.proto",
}
