/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.agogos.ConfigurationMessage', null, global);
goog.exportSymbol('proto.agogos.Schema', null, global);
goog.exportSymbol('proto.agogos.SubscribeParams', null, global);
goog.exportSymbol('proto.agogos.Upstream', null, global);
goog.exportSymbol('proto.agogos.UpstreamAuthCredentials', null, global);
goog.exportSymbol('proto.agogos.UpstreamAuthentication', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.SubscribeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agogos.SubscribeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.SubscribeParams.displayName = 'proto.agogos.SubscribeParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.SubscribeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.SubscribeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.SubscribeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.SubscribeParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.SubscribeParams}
 */
proto.agogos.SubscribeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.SubscribeParams;
  return proto.agogos.SubscribeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.SubscribeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.SubscribeParams}
 */
proto.agogos.SubscribeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.SubscribeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.SubscribeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.SubscribeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.SubscribeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.ConfigurationMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.agogos.ConfigurationMessage.repeatedFields_, null);
};
goog.inherits(proto.agogos.ConfigurationMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.ConfigurationMessage.displayName = 'proto.agogos.ConfigurationMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.agogos.ConfigurationMessage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.ConfigurationMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.ConfigurationMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.ConfigurationMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.ConfigurationMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    schema: (f = msg.getSchema()) && proto.agogos.Schema.toObject(includeInstance, f),
    upstreamsList: jspb.Message.toObjectList(msg.getUpstreamsList(),
    proto.agogos.Upstream.toObject, includeInstance),
    upstreamAuthCredentialsList: jspb.Message.toObjectList(msg.getUpstreamAuthCredentialsList(),
    proto.agogos.UpstreamAuthCredentials.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.ConfigurationMessage}
 */
proto.agogos.ConfigurationMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.ConfigurationMessage;
  return proto.agogos.ConfigurationMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.ConfigurationMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.ConfigurationMessage}
 */
proto.agogos.ConfigurationMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.agogos.Schema;
      reader.readMessage(value,proto.agogos.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 2:
      var value = new proto.agogos.Upstream;
      reader.readMessage(value,proto.agogos.Upstream.deserializeBinaryFromReader);
      msg.addUpstreams(value);
      break;
    case 3:
      var value = new proto.agogos.UpstreamAuthCredentials;
      reader.readMessage(value,proto.agogos.UpstreamAuthCredentials.deserializeBinaryFromReader);
      msg.addUpstreamAuthCredentials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.ConfigurationMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.ConfigurationMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.ConfigurationMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.ConfigurationMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.agogos.Schema.serializeBinaryToWriter
    );
  }
  f = message.getUpstreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.agogos.Upstream.serializeBinaryToWriter
    );
  }
  f = message.getUpstreamAuthCredentialsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.agogos.UpstreamAuthCredentials.serializeBinaryToWriter
    );
  }
};


/**
 * optional Schema schema = 1;
 * @return {?proto.agogos.Schema}
 */
proto.agogos.ConfigurationMessage.prototype.getSchema = function() {
  return /** @type{?proto.agogos.Schema} */ (
    jspb.Message.getWrapperField(this, proto.agogos.Schema, 1));
};


/** @param {?proto.agogos.Schema|undefined} value */
proto.agogos.ConfigurationMessage.prototype.setSchema = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.agogos.ConfigurationMessage.prototype.clearSchema = function() {
  this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.agogos.ConfigurationMessage.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Upstream upstreams = 2;
 * @return {!Array<!proto.agogos.Upstream>}
 */
proto.agogos.ConfigurationMessage.prototype.getUpstreamsList = function() {
  return /** @type{!Array<!proto.agogos.Upstream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.agogos.Upstream, 2));
};


/** @param {!Array<!proto.agogos.Upstream>} value */
proto.agogos.ConfigurationMessage.prototype.setUpstreamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.agogos.Upstream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.agogos.Upstream}
 */
proto.agogos.ConfigurationMessage.prototype.addUpstreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.agogos.Upstream, opt_index);
};


proto.agogos.ConfigurationMessage.prototype.clearUpstreamsList = function() {
  this.setUpstreamsList([]);
};


/**
 * repeated UpstreamAuthCredentials upstream_auth_credentials = 3;
 * @return {!Array<!proto.agogos.UpstreamAuthCredentials>}
 */
proto.agogos.ConfigurationMessage.prototype.getUpstreamAuthCredentialsList = function() {
  return /** @type{!Array<!proto.agogos.UpstreamAuthCredentials>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.agogos.UpstreamAuthCredentials, 3));
};


/** @param {!Array<!proto.agogos.UpstreamAuthCredentials>} value */
proto.agogos.ConfigurationMessage.prototype.setUpstreamAuthCredentialsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.agogos.UpstreamAuthCredentials=} opt_value
 * @param {number=} opt_index
 * @return {!proto.agogos.UpstreamAuthCredentials}
 */
proto.agogos.ConfigurationMessage.prototype.addUpstreamAuthCredentials = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.agogos.UpstreamAuthCredentials, opt_index);
};


proto.agogos.ConfigurationMessage.prototype.clearUpstreamAuthCredentialsList = function() {
  this.setUpstreamAuthCredentialsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agogos.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.Schema.displayName = 'proto.agogos.Schema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    definition: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.Schema}
 */
proto.agogos.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.Schema;
  return proto.agogos.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.Schema}
 */
proto.agogos.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string definition = 1;
 * @return {string}
 */
proto.agogos.Schema.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.agogos.Schema.prototype.setDefinition = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.Upstream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agogos.Upstream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.Upstream.displayName = 'proto.agogos.Upstream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.Upstream.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.Upstream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.Upstream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.Upstream.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    auth: (f = msg.getAuth()) && proto.agogos.UpstreamAuthentication.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.Upstream}
 */
proto.agogos.Upstream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.Upstream;
  return proto.agogos.Upstream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.Upstream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.Upstream}
 */
proto.agogos.Upstream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = new proto.agogos.UpstreamAuthentication;
      reader.readMessage(value,proto.agogos.UpstreamAuthentication.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.Upstream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.Upstream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.Upstream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.Upstream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.agogos.UpstreamAuthentication.serializeBinaryToWriter
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.agogos.Upstream.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.agogos.Upstream.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UpstreamAuthentication auth = 2;
 * @return {?proto.agogos.UpstreamAuthentication}
 */
proto.agogos.Upstream.prototype.getAuth = function() {
  return /** @type{?proto.agogos.UpstreamAuthentication} */ (
    jspb.Message.getWrapperField(this, proto.agogos.UpstreamAuthentication, 2));
};


/** @param {?proto.agogos.UpstreamAuthentication|undefined} value */
proto.agogos.Upstream.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.agogos.Upstream.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.agogos.Upstream.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.UpstreamAuthentication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agogos.UpstreamAuthentication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.UpstreamAuthentication.displayName = 'proto.agogos.UpstreamAuthentication';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.UpstreamAuthentication.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.UpstreamAuthentication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.UpstreamAuthentication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.UpstreamAuthentication.toObject = function(includeInstance, msg) {
  var f, obj = {
    authType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authority: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.UpstreamAuthentication}
 */
proto.agogos.UpstreamAuthentication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.UpstreamAuthentication;
  return proto.agogos.UpstreamAuthentication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.UpstreamAuthentication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.UpstreamAuthentication}
 */
proto.agogos.UpstreamAuthentication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthority(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.UpstreamAuthentication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.UpstreamAuthentication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.UpstreamAuthentication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.UpstreamAuthentication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthority();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string auth_type = 1;
 * @return {string}
 */
proto.agogos.UpstreamAuthentication.prototype.getAuthType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthentication.prototype.setAuthType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string authority = 2;
 * @return {string}
 */
proto.agogos.UpstreamAuthentication.prototype.getAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthentication.prototype.setAuthority = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.agogos.UpstreamAuthentication.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthentication.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agogos.UpstreamAuthCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agogos.UpstreamAuthCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.agogos.UpstreamAuthCredentials.displayName = 'proto.agogos.UpstreamAuthCredentials';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agogos.UpstreamAuthCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.agogos.UpstreamAuthCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agogos.UpstreamAuthCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.UpstreamAuthCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    authType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authority: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agogos.UpstreamAuthCredentials}
 */
proto.agogos.UpstreamAuthCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agogos.UpstreamAuthCredentials;
  return proto.agogos.UpstreamAuthCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agogos.UpstreamAuthCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agogos.UpstreamAuthCredentials}
 */
proto.agogos.UpstreamAuthCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthority(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agogos.UpstreamAuthCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agogos.UpstreamAuthCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agogos.UpstreamAuthCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agogos.UpstreamAuthCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthority();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string auth_type = 1;
 * @return {string}
 */
proto.agogos.UpstreamAuthCredentials.prototype.getAuthType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthCredentials.prototype.setAuthType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string authority = 2;
 * @return {string}
 */
proto.agogos.UpstreamAuthCredentials.prototype.getAuthority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthCredentials.prototype.setAuthority = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string client_id = 3;
 * @return {string}
 */
proto.agogos.UpstreamAuthCredentials.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthCredentials.prototype.setClientId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_secret = 4;
 * @return {string}
 */
proto.agogos.UpstreamAuthCredentials.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.agogos.UpstreamAuthCredentials.prototype.setClientSecret = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.agogos);
