// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Authentication - Verify JWT Authority without discovery endpoint 1`] = `
Object {
  "jwt_foo": "FOO",
}
`;

exports[`Authentication - Verify JWT Authority without discovery endpoint: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: JWK found
    authority: \\"http://authority-without-discrovery-endpoint\\"
[hh:mm:ss.ms] TRACE (auth-strategy-jwt): JWT verified
    issuer: \\"http://localhost:8070\\"
[hh:mm:ss.ms] DEBUG (request): Started to handle request
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): request query variables
    variables: {
      \\"foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE: Enriching request context...
    operationName: null
[hh:mm:ss.ms] TRACE: Executing request...
[hh:mm:ss.ms] TRACE: Executed.
[hh:mm:ss.ms] DEBUG (request): Finished to handle request
    durationMs: XXX
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): response data
    data: {
      \\"jwt_foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Invalid Authentication Scheme 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Unauthorized",
  "status": 401,
  "statusCode": 401,
}
`;

exports[`Authentication - Verify JWT Invalid JWT 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Unauthorized",
  "status": 401,
  "statusCode": 401,
}
`;

exports[`Authentication - Verify JWT Invalid JWT: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: New authority received. Creating new JWKs client...
    authority: \\"http://authority-without-discrovery-endpoint\\"
    jwksUri: \\"http://oidc-server-mock:8070/.well-known/openid-configuration/jwks\\"
[hh:mm:ss.ms] ERROR: Failed to get JWK for request token.
    authority: \\"http://authority-without-discrovery-endpoint\\"
    jwksUri: \\"http://oidc-server-mock:8070/.well-known/openid-configuration/jwks\\"
    err: {
      \\"type\\": \\"SigningKeyNotFoundError\\",
      \\"message\\": \\"Unable to find a signing key that matches 'C1B59DF60057CFB292C4E36CCE329615'\\",
      \\"stack\\":
          SigningKeyNotFoundError: Unable to find a signing key that matches 'C1B59DF60057CFB292C4E36CCE329615'
      \\"name\\": \\"SigningKeyNotFoundError\\"
    }
[hh:mm:ss.ms] DEBUG (auth-strategy-jwt): Failed to verify request JWT
    issuer: \\"http://localhost:8070\\"
    err: {
      \\"type\\": \\"SigningKeyNotFoundError\\",
      \\"message\\": \\"Unable to find a signing key that matches 'C1B59DF60057CFB292C4E36CCE329615'\\",
      \\"stack\\":
          SigningKeyNotFoundError: Unable to find a signing key that matches 'C1B59DF60057CFB292C4E36CCE329615'
      \\"name\\": \\"SigningKeyNotFoundError\\"
    }
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT JWK uri is not resolved 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Unauthorized",
  "status": 401,
  "statusCode": 401,
}
`;

exports[`Authentication - Verify JWT JWK uri is not resolved: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: New authority received. Creating new JWKs client...
    authority: \\"http://discovery-endpoint-does-not-exist\\"
[hh:mm:ss.ms] ERROR: Failed to get JWK config.
    issuerConfig: {
      \\"authority\\": \\"http://discovery-endpoint-does-not-exist\\",
      \\"audience\\": \\"Stitch Gateway\\",
      \\"description\\": \\"OpenId provider without discovery endpoint\\",
      \\"authenticatedPaths\\": [
        \\"/graphql\\"
      ]
    }
    err: {
      \\"type\\": \\"Error\\",
      \\"message\\": \\"Failed to retrieve jwksUri for http://discovery-endpoint-does-not-exist from undefined\\",
      \\"stack\\":
          Error: Failed to retrieve jwksUri for http://discovery-endpoint-does-not-exist from undefined
    }
[hh:mm:ss.ms] DEBUG (auth-strategy-jwt): Failed to verify request JWT
    issuer: \\"http://localhost:8071\\"
    err: {
      \\"type\\": \\"Error\\",
      \\"message\\": \\"Failed to retrieve jwksUri for http://discovery-endpoint-does-not-exist from undefined\\",
      \\"stack\\":
          Error: Failed to retrieve jwksUri for http://discovery-endpoint-does-not-exist from undefined
    }
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Multiple audiences 1`] = `
Object {
  "jwt_foo": "FOO",
}
`;

exports[`Authentication - Verify JWT Multiple audiences: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: JWK found
    authority: \\"http://authority-without-discrovery-endpoint\\"
[hh:mm:ss.ms] TRACE (auth-strategy-jwt): JWT verified
    issuer: \\"http://localhost:8070\\"
[hh:mm:ss.ms] DEBUG (request): Started to handle request
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): request query variables
    variables: {
      \\"foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE: Enriching request context...
    operationName: null
[hh:mm:ss.ms] TRACE: Executing request...
[hh:mm:ss.ms] TRACE: Executed.
[hh:mm:ss.ms] DEBUG (request): Finished to handle request
    durationMs: XXX
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): response data
    data: {
      \\"jwt_foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Second call with valid JWT - JWKs caching 1`] = `
Object {
  "jwt_foo": "FOO",
}
`;

exports[`Authentication - Verify JWT Second call with valid JWT - JWKs caching: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: JWK found
    authority: \\"http://oidc-server-mock:8060\\"
[hh:mm:ss.ms] TRACE (auth-strategy-jwt): JWT verified
    issuer: \\"http://localhost:8060\\"
[hh:mm:ss.ms] DEBUG (request): Started to handle request
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): request query variables
    variables: {
      \\"foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE: Enriching request context...
    operationName: null
[hh:mm:ss.ms] TRACE: Executing request...
[hh:mm:ss.ms] TRACE: Executed.
[hh:mm:ss.ms] DEBUG (request): Finished to handle request
    durationMs: XXX
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): response data
    data: {
      \\"jwt_foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Unexpected audience 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Unauthorized",
  "status": 401,
  "statusCode": 401,
}
`;

exports[`Authentication - Verify JWT Unexpected audience: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG (auth-strategy-jwt): Unexpected audience
    audience: \\"Stitch Other\\"
    issuer: \\"http://localhost:8070\\"
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Unknown issuer 1`] = `
Object {
  "error": "Unauthorized",
  "message": "Unauthorized",
  "status": 401,
  "statusCode": 401,
}
`;

exports[`Authentication - Verify JWT Unknown issuer: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG (auth-strategy-jwt): Unknown issuer
    issuer: \\"http://microsoft.com\\"
\\"***** END OUTPUT CAPTURE *****"
`;

exports[`Authentication - Verify JWT Valid JWT 1`] = `
Object {
  "jwt_foo": "FOO",
}
`;

exports[`Authentication - Verify JWT Valid JWT: gateway logs 1`] = `
"**** START OUTPUT CAPTURE *****\\"
[hh:mm:ss.ms] DEBUG: New authority received. Creating new JWKs client...
    authority: \\"http://oidc-server-mock:8060\\"
    jwksUri: \\"http://oidc-server-mock:8060/.well-known/openid-configuration/jwks\\"
[hh:mm:ss.ms] DEBUG: JWK found
    authority: \\"http://oidc-server-mock:8060\\"
[hh:mm:ss.ms] TRACE (auth-strategy-jwt): JWT verified
    issuer: \\"http://localhost:8060\\"
[hh:mm:ss.ms] DEBUG (request): Started to handle request
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): request query variables
    variables: {
      \\"foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE: Enriching request context...
    operationName: null
[hh:mm:ss.ms] TRACE: Executing request...
[hh:mm:ss.ms] TRACE: Executed.
[hh:mm:ss.ms] DEBUG (request): Finished to handle request
    durationMs: XXX
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
[hh:mm:ss.ms] TRACE (request): response data
    data: {
      \\"jwt_foo\\": \\"FOO\\"
    }
    query: \\"query ($foo: String!) {\\\\n  jwt_foo(foo: $foo)\\\\n}\\\\n\\"
\\"***** END OUTPUT CAPTURE *****"
`;
