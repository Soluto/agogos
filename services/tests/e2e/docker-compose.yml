version: '3.7'

services:
  gateway:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        RUN_TESTS: 'false'
    depends_on:
      - minio
    ports:
      - '8080:80'
    command: gateway
    env_file: .env
    environment:
      PORT: 80
      AUTHENTICATION_CONFIGURATION: |
        {
          "jwt": {
            "http://localhost:8060": {
              "authority": "http://oidc-server-mock:8060",
              "audience": "Stitch Gateway",
              "description": "OpenId provider with discovery endpoint",
              "authenticatedPaths": ["/graphql"]
            },
            "http://localhost:8070": {
              "authority": "http://authority-without-discrovery-endpoint",
              "audience": "Stitch Gateway",
              "jwksConfig": {
                "jwksUri": "http://oidc-server-mock:8070/.well-known/openid-configuration/jwks",
                "timeout": 1000
              },
              "description": "OpenId provider without discovery endpoint",
              "authenticatedPaths": ["/graphql"]
            }
          },
          "anonymous": {
            "rejectAuthorizationHeader": true,
            "publicPaths": ["/metrics", "/.well-known/apollo/server-health", "/graphql"]
          }
        }
      PLUGINS_DIR: /plugins
    volumes:
      - ./config/plugins:/plugins:ro
      - ./config/scripts:/scripts:ro

  registry:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      args:
        RUN_TESTS: 'false'
    depends_on:
      - minio
    ports:
      - '8090:80'
    command: registry
    env_file: .env
    environment:
      PORT: 80
    volumes:
      - ./config/plugins:/plugins:ro

  minio:
    image: minio/minio
    ports:
      - 9000:9000
    entrypoint: sh
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
    command: >
      -c "
      mkdir -p /var/minio/${S3_RESOURCE_BUCKET_NAME} &&
      echo '{\"schemas\":[],\"upstreams\": [],\"upstreamClientCredentials\": [],\"policies\": []}' > /var/minio/${S3_RESOURCE_BUCKET_NAME}/${S3_RESOURCE_OBJECT_KEY} &&
      echo '{\"schemas\":[],\"upstreams\": [],\"upstreamClientCredentials\": [],\"policies\": []}' > /var/minio/${S3_RESOURCE_BUCKET_NAME}/${S3_REGISTRY_RESOURCE_OBJECT_KEY} &&
      minio server /var/minio
      "
    env_file: .env

  oidc-server-mock:
    container_name: oidc-server-mock
    image: soluto/oidc-server-mock:0.3.0
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8060;http://+:8070
      SERVER_OPTIONS_PATH: /config/server-options.json
      API_SCOPES_PATH: /config/api-scopes.json
      API_RESOURCES_PATH: /config/api-resources.json
      USERS_CONFIGURATION_PATH: /config/user-configuration.json
      CLIENTS_CONFIGURATION_PATH: /config/clients-configuration.json
    volumes:
      - ./config/oidc:/config:ro
    ports:
      - 8060:8060
      - 8070:8070
