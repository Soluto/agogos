// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`authorization allows access to a field based on JWT info 1`] = `
Object {
  "arbitraryData": Object {
    "arbitraryField": "arbitraryValue",
  },
}
`;

exports[`authorization allows access to a field based on a non-default argument 1`] = `
Object {
  "userIgnoreRole": Object {
    "firstName": "John",
    "lastName": "Smith",
    "role": "normal",
  },
}
`;

exports[`authorization allows access to a field based on an argument using param injection from source 1`] = `
Object {
  "userAdmin": Object {
    "firstName": "John",
    "lastName": "Smith",
    "role": "admin",
  },
}
`;

exports[`authorization rejects access to a field based on JWT info 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy jwtName in namespace auth_jwt",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "arbitraryData",
        "arbitraryField"
      ]
    }
  ],
  "data": {
    "arbitraryData": {
      "arbitraryField": null
    }
  }
}
`;

exports[`authorization rejects access to a field based on JWT info when no JWT is sent 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy jwtName in namespace auth_jwt",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "arbitraryData",
        "arbitraryField"
      ]
    }
  ],
  "data": {
    "arbitraryData": {
      "arbitraryField": null
    }
  }
}
`;

exports[`authorization rejects access to a field when policy test fails, but still returns the other fields 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy onlyAdmin in namespace auth_jwt",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "user",
        "lastName"
      ]
    }
  ],
  "data": {
    "user": {
      "firstName": "John",
      "lastName": null,
      "role": "normal"
    }
  }
}
`;
