// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Authorization with queries Query allowed employee 1`] = `
Object {
  "address": "Tel Aviv",
  "id": "1",
  "name": "John Smith",
}
`;

exports[`Authorization with queries Query always-allow policy 1`] = `
Object {
  "policy": Object {
    "auth_with_query___always_allow": Object {
      "allow": true,
    },
  },
}
`;

exports[`Authorization with queries Query alwaysDeny policy 1`] = `
Object {
  "policy": Object {
    "auth_with_query___always_allow": Object {
      "allow": true,
    },
  },
}
`;

exports[`Authorization with queries Query denied employee 1 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy notClassified in namespace auth-with-query",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "deniedEmployee1",
        "address"
      ]
    }
  ],
  "data": {
    "deniedEmployee1": {
      "id": "2",
      "name": "Mark Zuckerberg",
      "address": null
    }
  }
}
`;

exports[`Authorization with queries Query denied employee 2 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy notClassified in namespace auth-with-query",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "deniedEmployee2",
        "address"
      ]
    }
  ],
  "data": {
    "deniedEmployee2": {
      "id": "2",
      "name": "Tom Baker",
      "address": null
    }
  }
}
`;

exports[`Authorization with queries Query field with policy with invalid query 1`] = `
{
  "errors": [
    {
      "message": "Policy query execution failed",
      "errorCode": "INTERNAL_SERVER_ERROR",
      "path": [
        "invalidQuery"
      ]
    }
  ],
  "data": {}
}
`;

exports[`Authorization with queries Query protected field 1`] = `
{
  "errors": [
    {
      "message": "Unauthorized by policy always-denied in namespace auth-with-query",
      "errorCode": "UNAUTHORIZED_BY_POLICY",
      "path": [
        "classifiedDepartments"
      ]
    }
  ],
  "data": {}
}
`;
