// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Policies Directive Tests 2 Allow policies with AND (ALLOW) 1`] = `
Object {
  "data": Object {
    "foo": Object {
      "bar": "BAR",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Policies Directive Tests 2 Allow policies with OR (ALLOW) 1`] = `
Object {
  "data": Object {
    "foo": Object {
      "bar": "BAR",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Policies Directive Tests Allow and deny policies with AND (DENY) 1`] = `
{
  "errors": [
    {
      "name": "GraphQLError",
      "message": "Error: Unauthorized by policy alwaysDeny in namespace ns",
      "errorCode": "INTERNAL_SERVER_ERROR",
      "path": [
        "foo",
        "bar"
      ]
    }
  ],
  "data": {}
}
`;

exports[`Policies Directive Tests Allow and deny policies with OR (ALLOW) 1`] = `
Object {
  "data": Object {
    "foo": Object {
      "bar": "BAR",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Policies Directive Tests Policy with args (ALLOW) 1`] = `
Object {
  "data": Object {
    "foo": Object {
      "bar": "BAR",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Policies Directive Tests Single policy (ALLOW) 1`] = `
Object {
  "data": Object {
    "foo": Object {
      "bar": "BAR",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Policies Directive Tests Single policy (DENY) 1`] = `
{
  "errors": [
    {
      "name": "GraphQLError",
      "message": "Error: Unauthorized by policy alwaysDeny in namespace ns",
      "errorCode": "INTERNAL_SERVER_ERROR",
      "path": [
        "foo",
        "bar"
      ]
    }
  ],
  "data": {}
}
`;
