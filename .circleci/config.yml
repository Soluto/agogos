version: 2.1

orbs:
  slack: circleci/slack@3.2.0

commands:
  build_image:
    description: Builds image
    parameters:
      imageName:
        type: string
      workingDirectory:
        type: string

    steps:
      - checkout
      - run:
          name: Build image
          working_directory: << parameters.workingDirectory >>
          command: docker build -t soluto/<< parameters.imageName >> --build-arg target=PRODUCTION .

      - run:
          name: Save image to fs
          working_directory: /tmp
          command: |
            mkdir -p agogos
            docker save -o agogos/<< parameters.imageName >>.tar soluto/<< parameters.imageName >>

      - persist_to_workspace:
          root: /tmp/agogos
          paths:
            - << parameters.imageName >>.tar

  push_image:
    description: Push image to Docker Hub
    parameters:
      imageName:
        type: string

    steps:
      - checkout

      - attach_workspace:
          at: /tmp/agogos

      - run:
          name: Load Docker image
          command: docker load < /tmp/agogos/<< parameters.imageName >>.tar

      - run:
          name: Set tag to env
          command: echo 'export IMAGE_TAG=`cat /tmp/agogos/version`' >> $BASH_ENV

      - deploy:
          name: Tag and push versioned Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker tag soluto/<< parameters.imageName >> soluto/<< parameters.imageName >>:${IMAGE_TAG}
            docker push soluto/<< parameters.imageName >>:${IMAGE_TAG}

      - deploy:
          name: Tag and push latest Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker tag soluto/<< parameters.imageName >>:${IMAGE_TAG} soluto/<< parameters.imageName >>:lastest
            docker push soluto/<< parameters.imageName >>:latest

      - slack/status:
          fail_only: true
          failure_message: ðŸ”´ Push image job for soluto/<< parameters.imageName >> has failed!

jobs:
  build_customer_api:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-e2e-customer-api
          workingDirectory: ./e2e/mocks/customer-api

  build_hotel_api:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-e2e-hotel-api
          workingDirectory: ./e2e/mocks/hotel-api

  build_order_api:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-e2e-order-api
          workingDirectory: ./e2e/mocks/order-api

  build_registry:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-registry
          workingDirectory: ./services/registry

  build_graphql_gateway:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-graphql-gateway
          workingDirectory: ./services/graphql-server

  build_gql_controller:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-gql-controller
          workingDirectory: ./remote-sources/kubernetes

  build_kubernetes_fs_source:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-source-kubernetes-fs
          workingDirectory: ./remote-sources/kubernetes-fs

  build_agogos_standalone:
    machine:
      image: 'ubuntu-1604:201903-01'
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/agogos
      - run:
          name: 'Load docker images from fs'
          working_directory: /tmp/agogos
          command: |
            docker load < agogos-registry.tar
            docker load < agogos-graphql-gateway.tar
            docker load < agogos-source-kubernetes-fs.tar
      - build_image:
          imageName: agogos-standalone
          workingDirectory: ./standalone

  build_e2e:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-e2e
          workingDirectory: ./e2e

  push_registry:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-registry

  push_graphql_gateway:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-graphql-gateway

  push_gql_controller:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-gql-controller

  push_kubernetes_fs_source:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-source-kubernetes-fs

  push_agogos_standalone:
    machine:
      image: 'ubuntu-1604:201903-01'
    steps:
      - push_image:
          imageName: agogos-standalone

  run_e2e_tests:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout

      - attach_workspace:
          at: /tmp/agogos

      - run:
          name: Load docker images from fs
          working_directory: /tmp/agogos
          command: |
            docker load < agogos-registry.tar
            docker load < agogos-graphql-gateway.tar
            docker load < agogos-gql-controller.tar
            docker load < agogos-e2e-customer-api.tar
            docker load < agogos-e2e-hotel-api.tar
            docker load < agogos-e2e-order-api.tar
            docker load < agogos-e2e.tar

      - run:
          name: Run E2E tests
          working_directory: e2e
          command: scripts/run_tests.sh

      - slack/status:
          only_for_branches: "master"
          fail_only: true

  tag_repo:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout

      - run:
          name: Config git user
          command: |
            git config user.email "agogos@soluto.com"
            git config user.name "agogos-circle-ci"

      - run:
          name: Tag git repository
          command: |
            export AGOGOS_VERSION=v0.1.${CIRCLE_BUILD_NUM}
            git tag $AGOGOS_VERSION
            mkdir -p /tmp/agogos
            echo $AGOGOS_VERSION | cut -d'v' -f 2 > /tmp/agogos/version

      - add_ssh_keys:
          fingerprints:
            - "d0:74:e5:a8:92:4c:0a:68:b8:f7:6d:d8:6b:aa:f8:a7"

      - run:
          name: Push tags to upstream
          command: git push --set-upstream origin $CIRCLE_BRANCH --tags

      - persist_to_workspace:
          root: /tmp/agogos
          paths:
            - version

      - slack/status:
          fail_only: true
          only_for_branches: master
          failure_message: ðŸ”´ Tagging repo job has failed! (Tag $AGOGOS_VERSION)

workflows:
  version: 2

  build_test_push:
    jobs:
      - build_customer_api
      - build_hotel_api
      - build_order_api
      - build_registry
      - build_graphql_gateway
      - build_gql_controller
      - build_kubernetes_fs_source
      - build_e2e
      - run_e2e_tests:
          requires:
            - build_registry
            - build_graphql_gateway
            - build_gql_controller
            - build_kubernetes_fs_source
            - build_e2e
            - build_customer_api
            - build_hotel_api
            - build_order_api
      - build_agogos_standalone:
          requires:
            - build_registry
            - build_graphql_gateway
            - build_kubernetes_fs_source
      - tag_repo:
          requires:
            - run_e2e_tests
            - build_agogos_standalone
          filters:
            branches:
              only: master
      - push_registry:
          requires:
            - tag_repo
          filters:
            branches:
              only: master
      - push_graphql_gateway:
          requires:
            - tag_repo
          filters:
            branches:
              only: master
      - push_gql_controller:
          requires:
            - tag_repo
          filters:
            branches:
              only: master
      - push_agogos_standalone:
          requires:
            - tag_repo
          filters:
            branches:
              only: master

  nightly:
    triggers:
      - schedule:
          cron: "0 11 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_customer_api
      - build_hotel_api
      - build_order_api
      - build_registry
      - build_graphql_gateway
      - build_gql_controller
      - build_kubernetes_fs_source
      - build_e2e
      - run_e2e_tests:
          requires:
            - build_registry
            - build_graphql_gateway
            - build_gql_controller
            - build_kubernetes_fs_source
            - build_e2e
            - build_customer_api
            - build_hotel_api
            - build_order_api
