version: 2.1

orbs:
  slack: circleci/slack@3.2.0

commands:
  build_image:
    description: Builds image
    parameters:
      imageName:
        type: string
      workingDirectory:
        type: string

    steps:
      - checkout
      - run:
          name: Build image
          working_directory: << parameters.workingDirectory >>
          command: docker build -t soluto/<< parameters.imageName >> --build-arg target=PRODUCTION .

      - run:
          name: Save image to fs
          command: |
            mkdir -p << parameters.imageName >>-cache
            docker save -o << parameters.imageName >>-cache/<< parameters.imageName >>.tar soluto/<< parameters.imageName >>

      - save_cache:
          paths:
            - << parameters.imageName >>-cache
          key: << parameters.imageName >>-cache-key{{ .Revision }}

  push_image:
    description: Push image to Docker Hub
    parameters:
      imageName:
        type: string

    steps:
      - checkout

      - restore_cache:
          keys:
            - << parameters.imageName >>-cache-key{{ .Revision }}

      - run:
          name: Load Docker image
          command: docker load < << parameters.imageName >>-cache/<< parameters.imageName >>.tar

      - run:
          name: Set tag to env
          # TODO: change
          command: echo `export IMAGE_TAG="0.1.0"` >> $BASH_ENV

      - deploy:
          name: Tag and push versioned Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker tag soluto/<< parameters.imageName >> soluto/<< parameters.imageName >>:${IMAGE_TAG}
            docker push soluto/<< parameters.imageName >>:${IMAGE_TAG}

      - deploy:
          name: Tag and push latest Docker image
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            docker tag soluto/<< parameters.imageName >>:${IMAGE_TAG} soluto/<< parameters.imageName >>:lastest
            docker push soluto/<< parameters.imageName >>:latest

      - slack/status:
          fail_only: true
          failure_message: ðŸ”´ Push image job for soluto/<< parameters.imageName >> has failed!

jobs:
  build_registry:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-registry
          workingDirectory: ./services/registry

  build_graphql_gateway:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-graphql-gateway
          workingDirectory: ./services/graphql-server

  build_gql_controller:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: agogos-gql-controller
          workingDirectory: ./remote-sources/kubernetes

  build_e2e:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - build_image:
          imageName: e2e
          workingDirectory: ./e2e

  push_registry:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-registry

  push_graphql_gateway:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-graphql-gateway

  push_gql_controller:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - push_image:
          imageName: agogos-gql-controller

  run_e2e_tests:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout

      - restore_cache:
          keys:
            - agogos-registry-cache-key{{ .Revision }}

      - restore_cache:
          keys:
            - agogos-graphql-gateway-cache-key{{ .Revision }}

      - restore_cache:
          keys:
            - agogos-gql-controller-cache-key{{ .Revision }}

      - restore_cache:
          keys:
            - e2e-cache-key{{ .Revision }}

      - run:
          name: Load docker images from fs
          command: |
            docker load < agogos-registry-cache/agogos-registry.tar
            docker load < agogos-graphql-gateway-cache/agogos-graphql-gateway.tar
            docker load < agogos-gql-controller-cache/agogos-gql-controller.tar
            docker load < e2e-cache/e2e.tar

      - run:
          name: Run E2E tests
          working_directory: e2e
          command: scripts/run_tests.sh

      - slack/status:
          fail_only: true

  tag_repo:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout

      - run:
          name: Config git user
          command: |
            git config user.email "agogos@soluto.com"
            git config user.name "agogos-circle-ci"

      - run:
          name: Tag git repository
          # TODO: Set real version
          command: |
            export AGOGOS_VERSION=v0.1.0
            git tag $AGOGOS_VERSION

      - add_ssh_keys:
          fingerprints:
            - "d0:74:e5:a8:92:4c:0a:68:b8:f7:6d:d8:6b:aa:f8:a7"

      - run:
          name: Push tags to upstream
          command: git push --set-upstream origin $CIRCLE_BRANCH --tags

      - slack/status:
          fail_only: true
          failure_message: ðŸ”´ Tagging repo job has failed! (Tag $AGOGOS_VERSION)

workflows:
  version: 2

  build_test_push:
    jobs:
      - build_registry
      - build_graphql_gateway
      - build_gql_controller
      - build_e2e
      - run_e2e_tests:
          requires:
            - build_registry
            - build_graphql_gateway
            - build_gql_controller
            - build_e2e
      - tag_repo:
          requires:
            - run_e2e_tests
          filters:
            branches:
              # TODO: Change to master when it's ready
              only: push-docker-images
      - push_registry:
          requires:
            - tag_repo
          filters:
            branches:
              # TODO: Change to master when it's ready
              only: push-docker-images
      - push_graphql_gateway:
          requires:
            - tag_repo
          filters:
            branches:
              # TODO: Change to master when it's ready
              only: push-docker-images
      - push_gql_controller:
          requires:
            - tag_repo
          filters:
            branches:
              # TODO: Change to master when it's ready
              only: push-docker-images

  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                # TODO: Change to master when it's ready
                - push-docker-images
    jobs:
      - build_registry
      - build_graphql_gateway
      - build_gql_controller
      - build_e2e
      - run_e2e_tests:
          requires:
            - build_registry
            - build_graphql_gateway
            - build_gql_controller
            - build_e2e
